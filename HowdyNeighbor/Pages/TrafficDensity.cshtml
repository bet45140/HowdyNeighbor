@page
@model HowdyNeighbor.Pages.TrafficDensityModel
@{
    ViewData["Title"] = "Traffic Density";
}
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

<h3 class="text-center">Traffic Data for:<br /><strong>@ViewData["searchString"]</strong></h3>

<div class="text-center">
    <h5>How would you rate these findings?</h5>
    <form method="post" asp-page-handler="SearchList">
        <select name="trafficImportance">
            <option value="0">No Rating</option>
            <option value="1">1 (Poor)</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5 (Great)</option>
        </select>&nbsp &nbsp
        <input type="submit" value="Save rating and return to checklist">
    </form>
</div>
<br />
The following map shows the current traffic flow surrounding <strong>@ViewData["searchString"]</strong>:
<br />
<div id="map"></div>
<script>
    //console.log(getLongitude())
    //console.log(getLatitude())
    async function getLatitude() {
        const searchedAddress = @Html.Raw(Json.Serialize(ViewData["searchString"]));
        const response = await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {
            params: {
                address: searchedAddress,
                key: 'AIzaSyBTM8Y11rAHhYrzULkGu6JMBo3BmhWtfSE'
            }
        })
            let lat = response.data.results[0].geometry.location.lat;
        return lat;

    }

        async function getLongitude() {
        const searchedAddress = @Html.Raw(Json.Serialize(ViewData["searchString"]));
            const response = await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {
                params: {
                    address: searchedAddress,
                    key: 'AIzaSyBTM8Y11rAHhYrzULkGu6JMBo3BmhWtfSE'
                }
            })
            let lng = response.data.results[0].geometry.location.lng;
            return lng;
    }

        async function initMap() {
        let latitude = await getLatitude()
        let longitude = await getLongitude()
        const location = { lat: latitude, lng: longitude }
        // Map options
        var options = {
            zoom: 15,
            center: location
        }

        // Create a new map
        const map = new google.maps.Map(document.getElementById('map'), options);

        // Add a map marker
        const marker = new google.maps.Marker({
            position: location,
            map: map,
        });
        const trafficLayer = new google.maps.TrafficLayer();
        trafficLayer.setMap(map);
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBTM8Y11rAHhYrzULkGu6JMBo3BmhWtfSE&callback=initMap&libraries=&v=weekly"
        defer></script>
<br /><br />



